import axios from "axios";
import moment from "moment";
import { useEffect, useRef, useState } from "react";
import DataTable from "react-data-table-component";
import { GetPayItems } from "../../assets/api/PayItems.js";
import { ProcessDataForSpreadsheetViewing } from "../../assets/js/Payslip.js";

const ReportsTable = () => {
  const BASE_URL = process.env.REACT_APP_BASE_URL;
  const [reportsData, setReportsData] = useState([]);
  const dataGroup = useRef([]);
  const dataAll = useRef([]);
  const [payItems, setPayItems] = useState();

  const fetchGroupData = async () => {
    try {
      const result = await axios.get(BASE_URL + "/mp-getAllPaySlipGroups");
      dataGroup.current = result.data;
      setReportsData(dataGroup.current);
    } catch (err) {
      console.error(err);
    }
  };

  const fetchAllPayslip = async () => {
    try {
      const result = await axios.get(BASE_URL + "/mp-getAllPayslip");
      dataAll.current = result.data;
    } catch (err) {
      console.error(err);
    }
  };

  const fetchPayItems = async () => {
    const payItems = await GetPayItems();
    setPayItems(payItems);
  };

  const handleDownloadClick = (data) => {
    const newData = dataAll.current.filter((row) => {
      return (
        row["Date Payment"].toLowerCase().includes(data.date_payment) &&
        row["Date From"].toLowerCase().includes(data.date_from) &&
        row["Date To"].toLowerCase().includes(data.date_to)
      );
    });
    DownloadData(ProcessDataForSpreadsheetViewing(newData, payItems));
  };

  useEffect(() => {
    fetchAllPayslip();
    fetchGroupData();
    fetchPayItems();
  }, []);

  const columns = [
    {
      name: "Pay Date",
      selector: (row) => moment(row.date_payment).format("MMMM DD, YYYY"),
      sortable: true,
    },
    {
      name: "Duration",
      selector: (row) => row.date_from,
      cell: (row) => {
        return (
          <>
            {moment(row.date_from).format("MMM DD, YYYY")} -{" "}
            {moment(row.date_to).format("MMM DD, YYYY")}
          </>
        );
      },
      sortable: true,
    },
    {
      name: "Source",
      selector: (row) => row.source,
      cell: "",
      sortable: true,
    },
    {
      name: "Download",
      selector: (row) => row.created_at,
      cell: (row) => {
        return (
          <>
            <div className="flex flex-row gap-2">
              <button
                className="w-10 h-8 flex bg-[#666A40] items-center justify-center fill-[#f7f7f7] rounded-md hover:bg-[#f7f7f7] hover:fill-[#666A40] hover:border-2 hover:border-[#666A40]"
                onClick={() => handleDownloadClick(row)}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  className="w-5 h-5"
                >
                  <path d="M19 9h-4V3H9v6H5l7 8zM4 19h16v2H4z"></path>
                </svg>
              </button>
            </div>
          </>
        );
      },
    },
  ];

  const handleSearch = (value) => {
    const searchValue = value.toLowerCase();
    const newData = dataGroup.current.filter((row) => {
      return (
        row.date_from.toLowerCase().includes(searchValue) ||
        row.date_to.toLowerCase().includes(searchValue) ||
        row.date_payment.toLowerCase().includes(searchValue) ||
        row.source.toLowerCase().includes(searchValue)
      );
    });
    setReportsData(newData);
  };

  const DownloadData = (downloadData) => {
    const data = downloadData;

    const transformData = (data) => {
      const transformedData = [];

      //Object Array
      data.forEach((record) => {
        const { payables, totals, ...others } = record;

        // Parse `payables` if it's a string, otherwise use it as is
        const parsedPayables =
          typeof payables === "string" ? JSON.parse(payables) : payables;

        // Parse `totals` if it's a string, otherwise use it as is
        const parsedTotals =
          typeof totals === "string" ? JSON.parse(totals) : totals;

        // Add "Total" prefix to the keys in `totals`
        const prefixedTotals = Object.fromEntries(
          Object.entries(parsedTotals).map(([key, value]) => [
            `Total ${key}`,
            value,
          ])
        );

        // Define keys to move to the end
        const keysAtEnd = ["Net Pay", "Generated By", "Source", "Created At"];

        // Extract keysToMove from `rest`
        const extractedKeys = keysAtEnd.reduce((acc, key) => {
          if (key in others) {
            acc[key] = others[key];
            delete others[key]; // Remove these keys from `rest` temporarily
          }
          return acc;
        }, {});

        let newObject = {
          ...others,
          ...parsedPayables,
          ...prefixedTotals,
          ...extractedKeys,
        };

        transformedData.push(newObject);
      });
      return transformedData;
    };

    const jsonToCSV = (jsonData) => {
      const header =
        Object.keys(jsonData[0])
          .map((key) => `"${key}"`)
          .join(",") + "\n";
      const rows = jsonData
        .map((row) =>
          Object.values(row)
            .map((value) => `"${value}"`)
            .join(",")
        )
        .join("\n");
      return header + rows;
    };

    function createCSVBlob(csvString) {
      const blob = new Blob([csvString], { type: "text/csv;charset=utf-8;" });
      return blob;
    }

    const download = (data) => {
      const dateFrom = data[0]["Date From"];
      const dateTo = data[0]["Date To"];
      const source = data[0]["Source"];
      const transformed = transformData(data);
      // return;
      const csv = jsonToCSV(transformed);
      const csvBlob = createCSVBlob(csv);
      const url = URL.createObjectURL(csvBlob);
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute(
        "download",
        `${source} (${moment(dateFrom).format("MMM DD, YYYY")} - ${moment(
          dateTo
        ).format("MMM DD, YYYY")}).csv`
      );
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    };

    download(data);
  };

  return (
    <>
      <div className="mt-10 p-5 w-full rounded-[15px] bg-white">
        <div className="w-fit items-center flex gap-4 ml-auto ">
          <div className="px-2 h-6 flex items-center gap-2 rounded-full bg-[#F5F5F5]">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 16 16"
              fill="currentColor"
              className="w-4 h-4 opacity-70"
            >
              <path
                fillRule="evenodd"
                d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                clipRule="evenodd"
              />
            </svg>
            <input
              type="text"
              className="px-2 w-96 focus:outline-0 bg-[#F5F5F5]"
              id="search-box"
              placeholder="Filter..."
              onChange={(e) => handleSearch(e.target.value)}
            />
          </div>
          <select
            className="p-2 w-26 border rounded-lg"
            onChange={(e) => handleSearch(e.target.value)}
          >
            <option value="" defaultValue>
              All
            </option>
            <option value="regular pay">Regular Payrun</option>
            <option value="last pay">Last Payrun</option>
            <option value="uploaded">Uploaded</option>
          </select>
        </div>
        <div className="overflow-x-auto">
          <DataTable
            className="width-fit"
            columns={columns}
            data={reportsData}
            pagination
            highlightOnHover
          />
        </div>
      </div>
    </>
  );
};

export default ReportsTable;
